{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","value","change","submit","onSubmit","type","onChange","placeholder","Result","weather","err","date","sunrise","sunset","temp","wind","pressure","city","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","toFixed","className","APIkey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleDateString","sys","main","prevState","speed","catch","console","log","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAiBeA,EAfF,SAAAC,GAAU,IACbC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,OACvB,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEE,KAAK,OACLJ,MAAOA,EACPK,SAAUJ,EACVK,YAAY,2BAEd,qDCgCSC,G,MAzCA,SAAAR,GAAU,IAAD,EAUlBA,EAAMS,QARRC,EAFoB,EAEpBA,IACAC,EAHoB,EAGpBA,KACAC,EAJoB,EAIpBA,QACAC,EALoB,EAKpBA,OACAC,EANoB,EAMpBA,KACAC,EAPoB,EAOpBA,KACAC,EARoB,EAQpBA,SACAC,EAToB,EASpBA,KAGEC,EAAU,KAEd,IAAKR,GAAOO,EAAM,CAChB,IAAME,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAE3CH,EACE,qCACE,6CACa,6BAAKD,OAElB,kDAAqBN,KACrB,yDAC0BG,EAAO,QAAQS,UADzC,YAGA,kDAAqBJ,KACrB,gDAAmBG,KACnB,sDAAyBP,EAAzB,UACA,oDAAuBC,EAAvB,aAIN,OACE,qBAAKQ,UAAU,SAAf,SACGd,EAAG,2BAAuBO,GAASC,MClCpCO,EAAS,mCA2EAC,E,4MAxEbC,MAAQ,CACN1B,MAAO,GACPU,KAAM,GACNM,KAAM,GACNL,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,SAAU,GACVN,IAAK,I,EAGPkB,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZ7B,MAAO4B,EAAEE,OAAO9B,S,EAIpB+B,iBAAmB,SAAAH,GAAM,IACf5B,EAAU,EAAK0B,MAAf1B,MAER4B,EAAEI,iBAEF,IAAMC,EAAG,4DAAwDjC,EAAxD,kBAAuEwB,GAEhFU,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,mBAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAItB,MAAOuB,qBAEhBC,EAAoBH,EAApBG,IAAKC,EAAeJ,EAAfI,KAAM9B,EAAS0B,EAAT1B,KAEnB,EAAKe,UAAS,SAAAgB,GAAS,MAAK,CAC1BpC,KAAK,EACLC,KAAM+B,EACN9B,QAASgC,EAAIhC,QACbC,OAAQ+B,EAAI/B,OACZC,KAAM+B,EAAK/B,KACXC,KAAMA,EAAKgC,MACX/B,SAAU6B,EAAK7B,SACfC,KAAM6B,EAAU7C,aAGnB+C,OAAM,SAAAtC,GACLuC,QAAQC,IAAIxC,GACZ,EAAKoB,UAAS,SAAAgB,GAAS,MAAK,CAC1BpC,KAAK,EACLO,KAAM6B,EAAU7C,c,4CAIxB,WAAU,IACAA,EAAUkD,KAAKxB,MAAf1B,MACR,OACE,sBAAKuB,UAAU,MAAf,UACE,cAAC,EAAD,CACEvB,MAAOA,EACPC,OAAQiD,KAAKvB,kBACbzB,OAAQgD,KAAKnB,mBAEf,cAAC,EAAD,CAAQvB,QAAS0C,KAAKxB,e,GAnEZyB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c0988618.chunk.js","sourcesContent":["// import React from \"react\";\r\n\r\nconst Form = props => {\r\n  const { value, change, submit } = props;\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={change}\r\n        placeholder=\"Enter the name of city\"\r\n      />\r\n      <button>Search city</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","// import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    err,\r\n    date,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    wind,\r\n    pressure,\r\n    city,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <>\r\n        <h3>\r\n          Result for <em>{city}</em>\r\n        </h3>\r\n        <h4>Date and hours: {date}</h4>\r\n        <h4>\r\n          Actually temperature: {(temp - 273.15).toFixed()} &#176;C\r\n        </h4>\r\n        <h4>Sunsrise today: {sunriseTime}</h4>\r\n        <h4>Sunset today: {sunsetTime}</h4>\r\n        <h4>Current wind force: {wind} m/s</h4>\r\n        <h4>Current pressure: {pressure} hPa</h4>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nconst APIkey = \"980ca2059e2b7c1df465203cebfc592a\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    wind: \"\",\n    pressure: \"\",\n    err: \"\",\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleCitySubmit = e => {\n    const { value } = this.state;\n\n    e.preventDefault();\n\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${APIkey}`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Not work....\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleDateString();\n\n        const { sys, main, wind } = data;\n\n        this.setState(prevState => ({\n          err: false,\n          date: time,\n          sunrise: sys.sunrise,\n          sunset: sys.sunset,\n          temp: main.temp,\n          wind: wind.speed,\n          pressure: main.pressure,\n          city: prevState.value,\n        }));\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value,\n        }));\n      });\n  };\n  render() {\n    const { value } = this.state;\n    return (\n      <div className=\"app\">\n        <Form\n          value={value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}